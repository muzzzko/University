// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UniversityUpdateData данные университета
// swagger:model universityUpdateData
type UniversityUpdateData struct {

	// адресс университета
	Address string `json:"address,omitempty"`

	// faculties
	Faculties []*UniversityUpdateDataFacultiesItems `json:"faculties"`

	// название университета
	Name string `json:"name,omitempty"`

	// rector
	Rector *UniversityUpdateDataRector `json:"rector,omitempty"`

	// region id
	RegionID int64 `json:"region_id,omitempty"`

	// профиль вуза
	Shape string `json:"shape,omitempty"`

	// статус вуза
	// Enum: [state commercial]
	Status string `json:"status,omitempty"`

	// кличество студентов
	StudentNumber int64 `json:"student_number,omitempty"`
}

// Validate validates this university update data
func (m *UniversityUpdateData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFaculties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UniversityUpdateData) validateFaculties(formats strfmt.Registry) error {

	if swag.IsZero(m.Faculties) { // not required
		return nil
	}

	for i := 0; i < len(m.Faculties); i++ {
		if swag.IsZero(m.Faculties[i]) { // not required
			continue
		}

		if m.Faculties[i] != nil {
			if err := m.Faculties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("faculties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniversityUpdateData) validateRector(formats strfmt.Registry) error {

	if swag.IsZero(m.Rector) { // not required
		return nil
	}

	if m.Rector != nil {
		if err := m.Rector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rector")
			}
			return err
		}
	}

	return nil
}

var universityUpdateDataTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["state","commercial"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universityUpdateDataTypeStatusPropEnum = append(universityUpdateDataTypeStatusPropEnum, v)
	}
}

const (

	// UniversityUpdateDataStatusState captures enum value "state"
	UniversityUpdateDataStatusState string = "state"

	// UniversityUpdateDataStatusCommercial captures enum value "commercial"
	UniversityUpdateDataStatusCommercial string = "commercial"
)

// prop value enum
func (m *UniversityUpdateData) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, universityUpdateDataTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UniversityUpdateData) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UniversityUpdateData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UniversityUpdateData) UnmarshalBinary(b []byte) error {
	var res UniversityUpdateData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
