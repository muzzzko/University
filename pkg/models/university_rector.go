// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UniversityRector ректор университета
// swagger:model universityRector
type UniversityRector struct {

	// фамилия ректора
	// Required: true
	FamilyName string `json:"family_name"`

	// имя ректора
	// Required: true
	FirstName string `json:"first_name"`

	// идентификатор ректора
	// Required: true
	ID int64 `json:"id"`

	// отчество ректора
	Patronymic string `json:"patronymic,omitempty"`
}

// Validate validates this university rector
func (m *UniversityRector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFamilyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UniversityRector) validateFamilyName(formats strfmt.Registry) error {

	if err := validate.RequiredString("family_name", "body", string(m.FamilyName)); err != nil {
		return err
	}

	return nil
}

func (m *UniversityRector) validateFirstName(formats strfmt.Registry) error {

	if err := validate.RequiredString("first_name", "body", string(m.FirstName)); err != nil {
		return err
	}

	return nil
}

func (m *UniversityRector) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UniversityRector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UniversityRector) UnmarshalBinary(b []byte) error {
	var res UniversityRector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
